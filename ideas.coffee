$(->
    $idea_textarea = $("#idea-textarea")
    $feedback_list = $("#feedback-list")
    feedback = {
        "grocery": {
            "keywords": ["grocery"],
            "category": "neutral",
            "message": "The average grocery store has a profit margin of about 1 percent.",
        },
        "porn": {
            "keywords": ["porn"],
            "category": "bad",
            "message": "something about credit card payment, if I recall correctly.",
        },
    }

    # to be generated by server:
    session_id  = 1234
    timestamp   = 120312587

    # used for comparison with current textbox content
    ideas       = [ '' ]



    update_history = (curr_text) =>
        last_idx = ideas.length - 1
        prev_text = ideas[last_idx]

        # if letters have been added or removed at the end, then
        # prev_text will be a substring of curr_text or vice versa.
        # if text has been added, revise the most recent text.
        # if text has been removed, do nothing (because the user might
        # re-type the exact same thing).
        common_len = Math.min(curr_text.length, prev_text.length) - 1
        if curr_text[..common_len] == prev_text[..common_len]
            if curr_text.length > prev_text.length
                ideas[last_idx] = curr_text
            return
        
        # if a single word has been changed, revise the most recent text.
        if curr_text.split(' ').length == prev_text.split(' ').length
            ideas[last_idx] = curr_text
            return

        # if it has not been handled by any of the above,
        # treat it as a new idea.
        ideas.push(curr_text)
        return



    add_feedback_item = (key, {keywords, category, message}) =>
        $item = $("<li class='feedback-list-item'>")
        $item.attr('id', "feedback-list-item-#{key}")
        $item.html(message)
        $item.html("<span class='icon-#{category}'></span><span class='feedback-keyword'>#{key}</span><span class='feedback-message'>#{message}</span>")
        $feedback_list.append($item)
        $idea_textarea.on "input propertychange", (e) =>
            idea_text = $idea_textarea.val()
            update_history(idea_text)
            console.log(ideas)

            # TODO(cbhl): handle multiple keywords
            if idea_text.indexOf(keywords[0]) >= 0
                # consider moving newer keywords to the top?
                # so.. fast fade out (if already visible) -> move -> fade in
                $item.fadeIn()
            else
                $item.fadeOut()

    $idea_textarea.autosize {append: "\n"}
    add_feedback_item key, value for key, value of feedback
    
)
